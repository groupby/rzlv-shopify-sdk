{% comment %}
  GBI Recommendations Carousel - Enhanced with Dynamic Layout

  Features:
  - Dynamic layout switching: Grid (8+ per page) vs Carousel (1-7 per page)
  - Proper pagination with navigation buttons and dots
  - Responsive design with different column counts
  - Centered alignment to prevent button overlap
  - Enhanced error handling and loading states

  Usage:
  {% render 'gbi-recommendations-carousel',
     model_name: 'similar-items',
     collection: 'products',
     total_results: 52,
     items_per_page: 8,
     header_text: 'Related Products',
     product_id: product.id,
     debug_mode: false %}
{% endcomment %}

{%- liquid
  assign model_name = model_name | default: 'similar-items'
  assign collection_name = collection | default: 'products'
  assign total_results = total_results | default: 12
  assign items_per_page = items_per_page | default: 4
  assign header_text = header_text | default: 'Related Products'
  assign product_id = product_id | default: product.id
  unless product_id
    assign product_id = 'default-product-id'
  endunless
  assign debug_mode = debug_mode | default: false
  assign shop_tenant = shop.permanent_domain | remove: '.myshopify.com'
  assign unique_id = 'gbi-recs-' | append: section.id | append: '-' | append: block.id | append: '-' | append: model_name
  
  # Calculate layout type based on items per page
  if items_per_page >= 8
    assign layout_type = 'grid'
  else
    assign layout_type = 'carousel'
  endif
  
  # Calculate responsive columns for grid layout
  assign desktop_cols = items_per_page
  if desktop_cols > 4
    assign desktop_cols = 4
  endif
  assign tablet_cols = desktop_cols
  if tablet_cols > 3
    assign tablet_cols = 3
  endif
  assign mobile_cols = tablet_cols  
  if mobile_cols > 2
    assign mobile_cols = 2
  endif
-%}

{% comment %} 
  Ensure required assets are loaded - More reliable method
  Uses global flag instead of content_for_header check to prevent duplicate loading
{% endcomment %}
{% unless window.gbi_script_loaded %}
  {{ 'gbi-recommendations-carousel.js' | asset_url | script_tag }}
  <script>window.gbi_script_loaded = true;</script>
{% endunless %}

<div class="gbi-recommendations-carousel gbi-layout-{{ layout_type }}"
     id="{{ unique_id }}"
     data-model-name="{{ model_name }}"
     data-collection="{{ collection_name }}"
     data-total-results="{{ total_results }}"
     data-items-per-page="{{ items_per_page }}"
     data-layout-type="{{ layout_type }}"
     data-desktop-cols="{{ desktop_cols }}"
     data-tablet-cols="{{ tablet_cols }}"
     data-mobile-cols="{{ mobile_cols }}"
     data-product-id="{{ product_id }}"
     data-shop-tenant="{{ shop_tenant }}"
     data-debug="{{ debug_mode }}">

  {% comment %} Header {% endcomment %}
  <div class="gbi-carousel-header">
    {% if header_text != blank %}
      <h4 class="gbi-carousel-title">{{ header_text }}</h4>
    {% endif %}
    <div class="gbi-carousel-info">
      <span class="gbi-product-count">Loading...</span>
      <span class="gbi-layout-indicator">{{ layout_type | capitalize }} View</span>
      <span class="gbi-page-info" style="display: none;"></span>
    </div>
    <div class="gbi-carousel-nav-info" style="display: none;"></div>
  </div>

  {% comment %} Main Carousel Container {% endcomment %}
  <div class="gbi-carousel-container">
    
    {% comment %} Loading State {% endcomment %}
    <div class="gbi-carousel-loading">
      <div class="gbi-loading-spinner"></div>
      <p>Loading recommendations...</p>
    </div>

    {% comment %} Main Carousel Wrapper {% endcomment %}
    <div class="gbi-carousel-wrapper" style="display: none;">
      
      {% comment %} Navigation Buttons - Show for both layouts when multiple pages {% endcomment %}
      <button class="gbi-carousel-nav gbi-carousel-prev" aria-label="Previous products" style="display: none;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M15 18L9 12L15 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>

      {% comment %} Product Track Container {% endcomment %}
      <div class="gbi-carousel-track-container">
        <div class="gbi-carousel-track gbi-track-{{ layout_type }}"></div>
      </div>

      <button class="gbi-carousel-nav gbi-carousel-next" aria-label="Next products" style="display: none;">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none">
          <path d="M9 18L15 12L9 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
        </svg>
      </button>
    </div>

    {% comment %} Pagination Dots - Show for both layouts when multiple pages {% endcomment %}
    <div class="gbi-carousel-dots" style="display: none;"></div>

    {% comment %} Error State {% endcomment %}
    <div class="gbi-carousel-error" style="display: none;">
      <div class="gbi-error-message">
        <h4>‚ùå Carousel Error</h4>
        <p>Unable to load recommendations at this time.</p>
        <button onclick="window.location.reload()" class="gbi-retry-btn">Try Again</button>
      </div>
    </div>

    {% comment %} Empty State {% endcomment %}
    <div class="gbi-carousel-empty" style="display: none;">
      <div class="gbi-empty-message">
        <h4>üì≠ No Recommendations</h4>
        <p>No products to display in the carousel</p>
      </div>
    </div>
  </div>

  {% comment %} Footer {% endcomment %}
  <div class="gbi-carousel-footer">
    <div class="gbi-scenario-info">
      <span>Model: <span class="gbi-model-name">{{ model_name }}</span></span>
      <span>Layout: <span class="gbi-layout-name">{{ layout_type | capitalize }}</span></span>
      <span>Per Page: <span class="gbi-page-size">{{ items_per_page }}</span></span>
      <span class="gbi-total-pages" style="display: none;">Pages: <span class="gbi-pages-count">1</span></span>
    </div>
  </div>

  {% comment %} Debug Panel {% endcomment %}
  {% if debug_mode %}
    <div class="gbi-debug-panel">
      <h5>üîß Debug Info</h5>
      <div class="gbi-debug-content">
        <div>Layout: {{ layout_type }}</div>
        <div>Items per page: {{ items_per_page }}</div>
        <div>Responsive: {{ desktop_cols }}d/{{ tablet_cols }}t/{{ mobile_cols }}m</div>
        <div class="gbi-debug-state">State: Loading...</div>
      </div>
    </div>
  {% endif %}
</div>

<style>
/* Enhanced Carousel Styles with Dynamic Layout Support */
.gbi-recommendations-carousel {
  position: relative;
  width: 100%;
  margin: 2rem 0;
  font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, sans-serif;
}

/* Header Styles */
.gbi-carousel-header {
  margin-bottom: 1.5rem;
}

.gbi-carousel-title {
  margin: 0 0 0.5rem 0;
  font-size: 1.5rem;
  font-weight: 600;
  color: #333;
}

.gbi-carousel-info {
  font-size: 0.875rem;
  color: #666;
  display: flex;
  gap: 1rem;
  flex-wrap: wrap;
  align-items: center;
}

.gbi-carousel-nav-info {
  margin-top: 0.5rem;
  font-size: 0.875rem;
  color: #666;
}

/* Container Styles */
.gbi-carousel-container {
  position: relative;
}

/* Loading State */
.gbi-carousel-loading {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 3rem 0;
  text-align: center;
}

.gbi-loading-spinner {
  width: 40px;
  height: 40px;
  border: 3px solid #f3f3f3;
  border-top: 3px solid #333;
  border-radius: 50%;
  animation: gbi-spin 1s linear infinite;
  margin-bottom: 1rem;
}

@keyframes gbi-spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(360deg); }
}

/* Main Wrapper */
.gbi-carousel-wrapper {
  position: relative;
  margin-bottom: 1.5rem;
}

/* Track Container and Track */
.gbi-carousel-track-container {
  flex: 1;
  overflow: hidden;
  position: relative;
  padding: 0 25px; /* Ensure space for navigation buttons */
}

.gbi-carousel-track {
  --products-per-row-desktop: 4;
  --products-per-row-tablet: 3;
  --products-per-row-mobile: 2;
  --gap: 1rem;
  --max-card-width: 280px;
  
  display: grid;
  gap: var(--gap);
  width: 100%;
  justify-content: center; /* Center products so navigation buttons align properly */
}

/* Carousel Layout (1-7 products per page) */
.gbi-track-carousel {
  grid-auto-flow: column;
  grid-auto-columns: minmax(200px, var(--max-card-width));
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  padding-bottom: 1rem;
  scrollbar-width: thin;
}

.gbi-track-carousel::-webkit-scrollbar {
  height: 6px;
}

.gbi-track-carousel::-webkit-scrollbar-track {
  background: #f1f1f1;
  border-radius: 3px;
}

.gbi-track-carousel::-webkit-scrollbar-thumb {
  background: #ccc;
  border-radius: 3px;
}

/* Grid Layout (8+ products per page) */
.gbi-track-grid {
  grid-template-columns: repeat(var(--products-per-row-desktop), minmax(200px, var(--max-card-width)));
}

/* Responsive Grid Columns */
@media screen and (max-width: 1024px) {
  .gbi-track-grid {
    grid-template-columns: repeat(var(--products-per-row-tablet), minmax(180px, var(--max-card-width)));
  }
}

@media screen and (max-width: 768px) {
  .gbi-carousel-track {
    --max-card-width: 240px;
  }
  
  .gbi-track-grid {
    grid-template-columns: repeat(var(--products-per-row-mobile), minmax(160px, var(--max-card-width)));
  }
  
  .gbi-track-carousel {
    grid-auto-columns: minmax(160px, var(--max-card-width));
  }
}

/* Product Card Styles - Now using anchor tags for proper links */
.gbi-product-card {
  display: flex;
  flex-direction: column;
  background: white;
  border: 1px solid #e5e5e5;
  border-radius: 8px;
  overflow: hidden;
  transition: all 0.2s ease;
  text-decoration: none;
  color: inherit;
  height: 100%;
  min-width: 0;
  max-width: var(--max-card-width);
  scroll-snap-align: start;
  cursor: pointer;
}

.gbi-product-card:hover {
  border-color: #ccc;
  box-shadow: 0 4px 12px rgba(0,0,0,0.1);
  transform: translateY(-2px);
  text-decoration: none;
  color: inherit;
}

.gbi-product-card:visited {
  color: inherit;
  text-decoration: none;
}

.gbi-product-card:active {
  color: inherit;
  text-decoration: none;
}

/* Product Image */
.gbi-product-image {
  position: relative;
  width: 100%;
  aspect-ratio: 1;
  overflow: hidden;
  background: #f8f8f8;
  flex-shrink: 0;
}

.gbi-product-image img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.2s ease;
}

.gbi-product-card:hover .gbi-product-image img {
  transform: scale(1.05);
}

.gbi-no-image {
  display: flex;
  align-items: center;
  justify-content: center;
  width: 100%;
  height: 100%;
  font-size: 2rem;
  color: #999;
  background: #f8f8f8;
}

.gbi-out-of-stock-badge {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  background: rgba(220, 53, 69, 0.9);
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-size: 0.75rem;
  font-weight: 500;
}

/* Product Info */
.gbi-product-info {
  padding: 1rem;
  display: flex;
  flex-direction: column;
  flex-grow: 1;
  min-height: 0;
}

.gbi-product-title {
  font-size: 0.875rem;
  font-weight: 500;
  line-height: 1.3;
  margin: 0 0 0.5rem 0;
  color: #333;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
  min-height: 2.275em;
}

.gbi-product-price {
  margin-bottom: 0.5rem;
}

.gbi-original-price {
  text-decoration: line-through;
  color: #999;
  font-size: 0.8em;
  margin-right: 0.5rem;
}

.gbi-current-price {
  font-weight: 600;
  color: #333;
  font-size: 0.95rem;
}

.gbi-product-rating {
  font-size: 0.8rem;
  color: #666;
  margin-bottom: 0.5rem;
}

.gbi-product-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.25rem;
  margin-top: auto;
}

.gbi-tag {
  background: #f0f0f0;
  color: #666;
  padding: 0.2rem 0.4rem;
  border-radius: 12px;
  font-size: 0.7rem;
  white-space: nowrap;
}

/* Product Actions */
.gbi-product-actions {
  padding: 0 1rem 1rem;
  margin-top: auto;
}

.gbi-view-product-btn {
  width: 100%;
  background: #333;
  color: white;
  border: none;
  padding: 0.75rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  font-size: 0.875rem;
  font-weight: 500;
  transition: background-color 0.2s ease;
  pointer-events: auto;
}

.gbi-view-product-btn:hover {
  background: #555;
}

/* Prevent link behavior on button only */
.gbi-product-actions .gbi-view-product-btn {
  position: relative;
  z-index: 2;
}

/* Navigation Buttons */
.gbi-carousel-nav {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
  background: white;
  border: 1px solid #ddd;  
  border-radius: 50%;
  width: 44px;
  height: 44px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;
  transition: all 0.2s ease;
  z-index: 10;
  box-shadow: 0 2px 8px rgba(0,0,0,0.1);
}

.gbi-carousel-nav:hover {
  background: #f5f5f5;
  border-color: #bbb;
}

.gbi-carousel-nav:disabled {
  opacity: 0.3;
  cursor: not-allowed;
}

.gbi-carousel-prev {
  left: clamp(-20px, -5vw, -15px);
}

.gbi-carousel-next {
  right: clamp(-20px, -5vw, -15px);
}

/* Pagination Dots */
.gbi-carousel-dots {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  margin-top: 1rem;
}

.gbi-carousel-dot {
  width: 8px;
  height: 8px;
  border-radius: 50%;
  background: #ddd;
  border: none;
  cursor: pointer;
  transition: all 0.2s ease;
}

.gbi-carousel-dot:hover {
  background: #bbb;
}

.gbi-carousel-dot.active {
  background: #333;
  transform: scale(1.2);
}

/* Error and Empty States */
.gbi-carousel-error, .gbi-carousel-empty {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 3rem 2rem;
  text-align: center;
}

.gbi-error-message, .gbi-empty-message {
  max-width: 400px;
}

.gbi-error-message h4, .gbi-empty-message h4 {
  margin: 0 0 1rem 0;
  font-size: 1.2rem;
}

.gbi-error-message p, .gbi-empty-message p {
  margin: 0 0 1rem 0;
  color: #666;
}

.gbi-retry-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 0.5rem 1rem;
  border-radius: 4px;
  cursor: pointer;
  transition: background-color 0.2s ease;
}

.gbi-retry-btn:hover {
  background: #0056b3;
}

/* Footer */
.gbi-carousel-footer {
  margin-top: 1rem;
}

.gbi-scenario-info {
  display: flex;
  gap: 1rem;
  font-size: 0.8rem;
  color: #666;
  justify-content: center;
  flex-wrap: wrap;
}

/* Debug Panel */
.gbi-debug-panel {
  margin-top: 1rem;
  padding: 1rem;
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 4px;
  font-size: 0.8rem;
}

.gbi-debug-panel h5 {
  margin: 0 0 0.5rem 0;
  font-size: 0.9rem;
}

.gbi-debug-content {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 0.5rem;
}

/* Mobile Optimizations */
@media screen and (max-width: 768px) {
  .gbi-recommendations-carousel {
    margin: 1rem 0;
  }

  .gbi-carousel-title {
    font-size: 1.3rem;
  }

  .gbi-product-info {
    padding: 0.75rem;
  }

  .gbi-product-title {
    font-size: 0.8rem;
  }

  .gbi-current-price {
    font-size: 0.875rem;
  }

  .gbi-view-product-btn {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .gbi-carousel-nav {
    width: 36px;
    height: 36px;
  }

  .gbi-carousel-prev {
    left: clamp(-18px, -3vw, -12px);
  }

  .gbi-carousel-next {
    right: clamp(-18px, -3vw, -12px);
  }

  .gbi-carousel-info {
    font-size: 0.8rem;
    gap: 0.5rem;
  }

  .gbi-carousel-track-container {
    padding: 0 20px; /* Smaller padding on mobile */
  }
}

@media screen and (max-width: 480px) {
  .gbi-carousel-track {
    --max-card-width: 200px;
  }
  
  .gbi-track-carousel {
    grid-auto-flow: row;
    grid-template-columns: repeat(var(--products-per-row-mobile), minmax(140px, var(--max-card-width)));
    overflow-x: visible;
  }

  .gbi-carousel-nav {
    display: none;
  }

  .gbi-carousel-track-container {
    padding: 0; /* No padding needed when nav buttons are hidden */
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .gbi-product-card,
  .gbi-carousel-nav,
  .gbi-carousel-dot,
  .gbi-product-image img {
    transition: none;
  }

  .gbi-loading-spinner {
    animation: none;
  }
}

@media (prefers-contrast: high) {
  .gbi-product-card {
    border-width: 2px;
  }

  .gbi-carousel-nav {
    border-width: 2px;
  }
}
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const carousel = document.getElementById('{{ unique_id }}');
  if (!carousel) return;

  // Configuration from data attributes
  const config = {
    modelName: carousel.dataset.modelName,
    collection: carousel.dataset.collection,
    totalResults: parseInt(carousel.dataset.totalResults),
    itemsPerPage: parseInt(carousel.dataset.itemsPerPage),
    layoutType: carousel.dataset.layoutType,
    desktopCols: parseInt(carousel.dataset.desktopCols),
    tabletCols: parseInt(carousel.dataset.tabletCols),
    mobileCols: parseInt(carousel.dataset.mobileCols),
    productId: carousel.dataset.productId,
    shopTenant: carousel.dataset.shopTenant,
    debug: carousel.dataset.debug === 'true'
  };

  // Enhanced carousel functionality
  const GBICarouselEnhanced = {
    currentPage: 1,
    totalPages: 1,
    products: [],
    
    init() {
      this.checkSDK();
      this.bindEvents();
      this.setupResponsiveCSS();
      this.loadProducts();
    },
    
    checkSDK() {
      if (typeof window.GBISearchStateDriver === 'undefined') {
        console.warn('GBI Search State Driver not found');
        this.showError('SDK not available');
        return false;
      }
      return true;
    },
    
    setupResponsiveCSS() {
      const track = carousel.querySelector('.gbi-carousel-track');
      track.style.setProperty('--products-per-row-desktop', config.desktopCols);
      track.style.setProperty('--products-per-row-tablet', config.tabletCols);
      track.style.setProperty('--products-per-row-mobile', config.mobileCols);
    },
    
    bindEvents() {
      const prevBtn = carousel.querySelector('.gbi-carousel-prev');
      const nextBtn = carousel.querySelector('.gbi-carousel-next');
      
      prevBtn?.addEventListener('click', () => this.previousPage());
      nextBtn?.addEventListener('click', () => this.nextPage());
    },
    
    async loadProducts() {
      if (!this.checkSDK()) return;
      
      try {
        // Initialize recommendations manager
        await window.GBISearchStateDriver.initRecsManager(config.modelName, config.collection);
        
        // Set page size
        window.GBISearchStateDriver.setPageSize(config.itemsPerPage);
        
        // Load first page
        await this.refreshProducts();
        
        this.hideLoading();
        this.showCarousel();
        
      } catch (error) {
        console.error('Error loading products:', error);
        this.showError('Failed to load recommendations');
      }
    },
    
    async refreshProducts() {
      try {
        const products = window.GBISearchStateDriver.getCurrentPageProducts();
        const state = window.GBISearchStateDriver.getRecsManagerState();
        
        this.products = products || [];
        this.currentPage = state?.currentPage || 1;
        this.totalPages = state?.totalPages || 1;
        
        this.renderProducts();
        this.updateNavigation();
        this.updateInfo();
        
        if (config.debug) {
          this.updateDebug(state);
        }
        
      } catch (error) {
        console.error('Error refreshing products:', error);
        this.showError('Failed to refresh products');
      }
    },
    
    renderProducts() {
      const track = carousel.querySelector('.gbi-carousel-track');
      if (!track) return;
      
      if (this.products.length === 0) {
        this.showEmpty();
        return;
      }
      
      track.innerHTML = this.products.map(product => this.renderProductCard(product)).join('');
    },
    
         renderProductCard(product) {
       const imageHtml = product.images && product.images.length > 0 
         ? `<img src="${product.images[0].uri}" alt="${this.escapeHtml(product.title || product.name || 'Product')}" onerror="this.parentElement.innerHTML='<div class=\\'gbi-no-image\\'>üì¶</div>'">`
         : '<div class="gbi-no-image">üì¶</div>';
       
       const priceHtml = product.price ? this.formatPrice(product.price) : 'N/A';
       
       const tagsHtml = product.tags && product.tags.length > 0 
         ? `<div class="gbi-product-tags">${product.tags.slice(0, 3).map(tag => `<span class="gbi-tag">${this.escapeHtml(tag)}</span>`).join('')}</div>`
         : '';
       
       // Get product URL - fallback to search or collection page if not available
       const productUrl = product.url || product.handle ? `/products/${product.handle || product.url}` : '#';
       
       return `
         <a href="${productUrl}" class="gbi-product-card" ${productUrl === '#' ? 'onclick="return false;"' : ''}>
           <div class="gbi-product-image">
             ${imageHtml}
             ${product.availableQuantity === 0 ? '<div class="gbi-out-of-stock-badge">Out of Stock</div>' : ''}
           </div>
           <div class="gbi-product-info">
             <h5 class="gbi-product-title">${this.escapeHtml(product.title || product.name || 'Untitled Product')}</h5>
             <div class="gbi-product-price">
               ${product.originalPrice && product.originalPrice.value > product.price?.value ? 
                 `<span class="gbi-original-price">${this.formatPrice(product.originalPrice)}</span>` : ''}
               <span class="gbi-current-price">${priceHtml}</span>
             </div>
             ${product.rating ? `<div class="gbi-product-rating">‚≠ê ${product.rating.averageRating} (${product.rating.ratingCount} reviews)</div>` : ''}
             ${tagsHtml}
           </div>
           <div class="gbi-product-actions">
             <button class="gbi-view-product-btn" onclick="window.location.href='${productUrl}'; return false;">
               View Product
             </button>
           </div>
         </a>
       `;
     },
    
    updateNavigation() {
      const prevBtn = carousel.querySelector('.gbi-carousel-prev');
      const nextBtn = carousel.querySelector('.gbi-carousel-next');
      const dotsContainer = carousel.querySelector('.gbi-carousel-dots');
      
      // Show/hide navigation based on multiple pages
      const hasMultiplePages = this.totalPages > 1;
      
      if (prevBtn) {
        prevBtn.style.display = hasMultiplePages ? 'flex' : 'none';
        prevBtn.disabled = this.currentPage === 1;
      }
      
      if (nextBtn) {
        nextBtn.style.display = hasMultiplePages ? 'flex' : 'none';
        nextBtn.disabled = this.currentPage === this.totalPages;
      }
      
      // Update pagination dots
      if (dotsContainer) {
        if (hasMultiplePages) {
          dotsContainer.style.display = 'flex';
          dotsContainer.innerHTML = Array.from({length: this.totalPages}, (_, i) => 
            `<button class="gbi-carousel-dot ${i + 1 === this.currentPage ? 'active' : ''}" 
                     onclick="window.GBICarousel_${config.modelName}.goToPage(${i + 1})" 
                     aria-label="Go to page ${i + 1}"></button>`
          ).join('');
        } else {
          dotsContainer.style.display = 'none';
        }
      }
    },
    
    updateInfo() {
      const productCount = carousel.querySelector('.gbi-product-count');
      const pageInfo = carousel.querySelector('.gbi-page-info');
      const navInfo = carousel.querySelector('.gbi-carousel-nav-info');
      const pagesCount = carousel.querySelector('.gbi-pages-count');
      const totalPagesSpan = carousel.querySelector('.gbi-total-pages');
      
      if (productCount) {
        productCount.textContent = `Showing ${this.products.length} of ${config.totalResults} products`;
      }
      
      if (this.totalPages > 1) {
        if (pageInfo) {
          pageInfo.textContent = `Page ${this.currentPage} of ${this.totalPages}`;
          pageInfo.style.display = 'inline';
        }
        
        if (navInfo) {
          navInfo.textContent = `Page ${this.currentPage} of ${this.totalPages} (${config.itemsPerPage} per page)`;
          navInfo.style.display = 'block';
        }
        
        if (pagesCount) {
          pagesCount.textContent = this.totalPages;
        }
        
        if (totalPagesSpan) {
          totalPagesSpan.style.display = 'inline';
        }
      } else {
        if (pageInfo) pageInfo.style.display = 'none';
        if (navInfo) navInfo.style.display = 'none';
        if (totalPagesSpan) totalPagesSpan.style.display = 'none';
      }
    },
    
    updateDebug(state) {
      const debugState = carousel.querySelector('.gbi-debug-state');
      if (debugState) {
        debugState.innerHTML = `
          Current Page: ${state?.currentPage || 'N/A'}<br>
          Total Pages: ${state?.totalPages || 'N/A'}<br>
          Products: ${this.products.length}<br>
          Page Size: ${state?.pageSize || 'N/A'}
        `;
      }
    },
    
    async previousPage() {
      if (this.currentPage <= 1) return;
      
      try {
        window.GBISearchStateDriver.previousPage();
        await this.refreshProducts();
      } catch (error) {
        console.error('Error navigating to previous page:', error);
      }
    },
    
    async nextPage() {
      if (this.currentPage >= this.totalPages) return;
      
      try {
        window.GBISearchStateDriver.nextPage();
        await this.refreshProducts();
      } catch (error) {
        console.error('Error navigating to next page:', error);
      }
    },
    
    async goToPage(pageNumber) {
      if (pageNumber < 1 || pageNumber > this.totalPages || pageNumber === this.currentPage) return;
      
      try {
        window.GBISearchStateDriver.goToPage(pageNumber);
        await this.refreshProducts();
      } catch (error) {
        console.error('Error navigating to page:', error);
      }
    },
    
    showCarousel() {
      carousel.querySelector('.gbi-carousel-wrapper').style.display = 'block';
    },
    
    hideLoading() {
      carousel.querySelector('.gbi-carousel-loading').style.display = 'none';
    },
    
    showError(message) {
      carousel.querySelector('.gbi-carousel-error').style.display = 'block';
      carousel.querySelector('.gbi-carousel-loading').style.display = 'none';
      carousel.querySelector('.gbi-error-message p').textContent = message;
    },
    
    showEmpty() {
      carousel.querySelector('.gbi-carousel-empty').style.display = 'block';
      carousel.querySelector('.gbi-carousel-wrapper').style.display = 'none';
    },
    
    formatPrice(price) {
      if (!price || typeof price.value !== 'number') return 'N/A';
      return new Intl.NumberFormat('en-US', {
        style: 'currency',
        currency: price.currency || 'USD'
      }).format(price.value);
    },
    
    escapeHtml(text) {
      const div = document.createElement('div');
      div.textContent = text;
      return div.innerHTML;
    }
  };
  
  // Make globally accessible for dot navigation
  window[`GBICarousel_${config.modelName}`] = GBICarouselEnhanced;
  
  // Initialize carousel
  GBICarouselEnhanced.init();
});
</script>
